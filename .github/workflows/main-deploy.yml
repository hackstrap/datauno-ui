# This is a basic workflow to help you get started with Actions

name: Deploy to Production

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@v1
      - name: Set environmental variable
        run: |
          echo "IMAGE_NAME=$(echo docker.pkg.github.com/${{ github.repository }}/datauno-ui:$(date "+%d%m%y%H%M"))" >> $GITHUB_ENV
          echo "USERNAME=${{ secrets.USERNAME }}" >> $GITHUB_ENV
          echo "TOKEN=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_ENV
          echo "REPO=${{ github.repository }}" >> $GITHUB_ENV
      - name: Build the Docker image and publish registry
        run: |
          echo $IMAGE_NAME
          docker build . --file Dockerfile --tag $IMAGE_NAME
          docker login -u sandeep-devarapalli -p ${{ secrets.GITHUB_TOKEN }} docker.pkg.github.com
          docker push $IMAGE_NAME
          docker logout docker.pkg.github.com
      - name: Executing remote ssh commands
        uses: appleboy/ssh-action@master
        env:
          USERNAME: ${{ env.USERNAME }}
          TOKEN: ${{ env.TOKEN }}
          REPO: ${{ env.REPO }}
        with:
          host: ${{ secrets.DIGITAL_OCEAN_IP }}
          port: ${{ secrets.SSH_PORT }}
          username: ${{ secrets.DIGITAL_OCEAN_USER }}
          key: ${{ secrets.SSH_DEPLOYMENT_KEY }}
          passphrase: ${{ secrets.SSH_DEPLOYMENT_KEY_PASSPHRASE }}
          envs: IMAGE_NAME,USERNAME,TOKEN,REPO
          script: |
            echo "it is working"
            whoami
            ufw allow http
            ufw allow https
            echo $IMAGE_NAME
            echo Changing directory to $HOME/hackstrap
            mkdir $HOME/datauno-ui
            cd $HOME/datauno-ui
            echo current directory $PWD

            docker login -u $USERNAME -p $TOKEN docker.pkg.github.com
            echo "Fetching $IMAGE_NAME..."
            docker pull $IMAGE_NAME

            echo "Successfully pulled the package"

            echo "Fetching compose file from $REPO..."
            echo https://api.github.com/repos/$REPO/contents/docker-compose.yml --header "authorization: Bearer "$TOKEN
            curl $(curl https://api.github.com/repos/$REPO/contents/docker-compose.yml --header "authorization: Bearer "$TOKEN | jq -r '.download_url') > docker-compose.temp.yml
            if [ $? -ne 0 ]; then
              echo "Couldn't fetch docker-compose file"
              exit 1
            fi

            echo "Compose file merger initiated..."
            out=$(IMAGE_NAME=$IMAGE_NAME docker-compose -f docker-compose.basic.yml -f docker-compose.temp.yml config)
            if [ $? -ne 0 ]; then
              echo "An error occured while merging compose files"
              exit 2
            else
              echo "$out" > docker-compose.basic.yml
              echo "Successfully written to docker-compose.basic.yml"
            fi

            echo "Redeploying stack by using new image..."
            docker stack deploy --with-registry-auth -c docker-compose.basic.yml hackstrap
            if [ $? -eq 0 ]; then
              echo "Deployed successfully"
            else
              echo "Deployment failed"
              exit 3
            fi

            # Logout
            docker logout docker.pkg.github.com
          
      # - name: Run deploy script on the server
      #   uses: appleboy/ssh-action@master
      #   env:
      #     USERNAME: ${{ secrets.USERNAME }}
      #     TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     REPO: ${{ github.repository }}
      #   with:
      #     host: ${{ secrets.HOST }}
      #     username: ${{ secrets.USERNAME }}
      #     key: ${{ secrets.DEPLOYMENT_KEY }}
      #     envs: USERNAME,TOKEN,IMAGE_NAME,REPO
      #     script: ~/hackstrap/deploy-script.sh $USERNAME $TOKEN $IMAGE_NAME $REPO